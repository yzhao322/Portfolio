{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst util = require('util');\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nconst mkdirp = require('make-dir');\n\nconst supportsColor = require('supports-color');\n\nconst isAbsolute = path.isAbsolute ||\n/* istanbul ignore next */\nfunction (p) {\n  return path.resolve(p) === path.normalize(p);\n};\n/**\n * abstract interface for writing content\n * @class ContentWriter\n * @constructor\n */\n\n/* istanbul ignore next: abstract class */\n\n\nfunction ContentWriter() {}\n/**\n * writes a string as-is to the destination\n * @param {String} str the string to write\n */\n\n/* istanbul ignore next: abstract class */\n\n\nContentWriter.prototype.write = function () {\n  throw new Error('write: must be overridden');\n};\n/**\n * returns the colorized version of a string. Typically,\n * content writers that write to files will return the\n * same string and ones writing to a tty will wrap it in\n * appropriate escape sequences.\n * @param {String} str the string to colorize\n * @param {String} clazz one of `high`, `medium` or `low`\n * @returns {String} the colorized form of the string\n */\n\n\nContentWriter.prototype.colorize = function (str\n/*, clazz*/\n) {\n  return str;\n};\n/**\n * writes a string appended with a newline to the destination\n * @param {String} str the string to write\n */\n\n\nContentWriter.prototype.println = function (str) {\n  this.write(str + '\\n');\n};\n/**\n * closes this content writer. Should be called after all writes are complete.\n */\n\n\nContentWriter.prototype.close = function () {};\n/**\n * a content writer that writes to a file\n * @param {Number} fd - the file descriptor\n * @extends ContentWriter\n * @constructor\n */\n\n\nfunction FileContentWriter(fd) {\n  this.fd = fd;\n}\n\nutil.inherits(FileContentWriter, ContentWriter);\n\nFileContentWriter.prototype.write = function (str) {\n  fs.writeSync(this.fd, str);\n};\n\nFileContentWriter.prototype.close = function () {\n  fs.closeSync(this.fd);\n};\n/**\n * a content writer that writes to the console\n * @extends ContentWriter\n * @constructor\n */\n\n\nfunction ConsoleWriter() {}\n\nutil.inherits(ConsoleWriter, ContentWriter); // allow stdout to be captured for tests.\n\nlet capture = false;\nlet output = '';\n\nConsoleWriter.prototype.write = function (str) {\n  if (capture) {\n    output += str;\n  } else {\n    process.stdout.write(str);\n  }\n};\n\nConsoleWriter.prototype.colorize = function (str, clazz) {\n  const colors = {\n    low: '31;1',\n    medium: '33;1',\n    high: '32;1'\n  };\n  /* istanbul ignore next: different modes for CI and local */\n\n  if (supportsColor.stdout && colors[clazz]) {\n    return '\\u001b[' + colors[clazz] + 'm' + str + '\\u001b[0m';\n  }\n\n  return str;\n};\n/**\n * utility for writing files under a specific directory\n * @class FileWriter\n * @param {String} baseDir the base directory under which files should be written\n * @constructor\n */\n\n\nfunction FileWriter(baseDir) {\n  if (!baseDir) {\n    throw new Error('baseDir must be specified');\n  }\n\n  this.baseDir = baseDir;\n}\n/**\n * static helpers for capturing stdout report output;\n * super useful for tests!\n */\n\n\nFileWriter.startCapture = function () {\n  capture = true;\n};\n\nFileWriter.stopCapture = function () {\n  capture = false;\n};\n\nFileWriter.getOutput = function () {\n  return output;\n};\n\nFileWriter.resetOutput = function () {\n  output = '';\n};\n/**\n * returns a FileWriter that is rooted at the supplied subdirectory\n * @param {String} subdir the subdirectory under which to root the\n *  returned FileWriter\n * @returns {FileWriter}\n */\n\n\nFileWriter.prototype.writerForDir = function (subdir) {\n  if (isAbsolute(subdir)) {\n    throw new Error('Cannot create subdir writer for absolute path: ' + subdir);\n  }\n\n  return new FileWriter(this.baseDir + '/' + subdir);\n};\n/**\n * copies a file from a source directory to a destination name\n * @param {String} source path to source file\n * @param {String} dest relative path to destination file\n * @param {String} [header=undefined] optional text to prepend to destination\n *  (e.g., an \"this file is autogenerated\" comment, copyright notice, etc.)\n */\n\n\nFileWriter.prototype.copyFile = function (source, dest, header) {\n  if (isAbsolute(dest)) {\n    throw new Error('Cannot write to absolute path: ' + dest);\n  }\n\n  dest = path.resolve(this.baseDir, dest);\n  mkdirp.sync(path.dirname(dest));\n  let contents;\n\n  if (header) {\n    contents = header + fs.readFileSync(source, 'utf8');\n  } else {\n    contents = fs.readFileSync(source);\n  }\n\n  fs.writeFileSync(dest, contents);\n};\n/**\n * returns a content writer for writing content to the supplied file.\n * @param {String|null} file the relative path to the file or the special\n *  values `\"-\"` or `null` for writing to the console\n * @returns {ContentWriter}\n */\n\n\nFileWriter.prototype.writeFile = function (file) {\n  if (file === null || file === '-') {\n    return new ConsoleWriter();\n  }\n\n  if (isAbsolute(file)) {\n    throw new Error('Cannot write to absolute path: ' + file);\n  }\n\n  file = path.resolve(this.baseDir, file);\n  mkdirp.sync(path.dirname(file));\n  return new FileContentWriter(fs.openSync(file, 'w'));\n};\n\nmodule.exports = FileWriter;","map":{"version":3,"sources":["/Users/yanzhao/react-employer-viewer/node_modules/istanbul-lib-report/lib/file-writer.js"],"names":["util","require","path","fs","mkdirp","supportsColor","isAbsolute","p","resolve","normalize","ContentWriter","prototype","write","Error","colorize","str","println","close","FileContentWriter","fd","inherits","writeSync","closeSync","ConsoleWriter","capture","output","process","stdout","clazz","colors","low","medium","high","FileWriter","baseDir","startCapture","stopCapture","getOutput","resetOutput","writerForDir","subdir","copyFile","source","dest","header","sync","dirname","contents","readFileSync","writeFileSync","writeFile","file","openSync","module","exports"],"mappings":"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","sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst util = require('util');\nconst path = require('path');\nconst fs = require('fs');\nconst mkdirp = require('make-dir');\nconst supportsColor = require('supports-color');\nconst isAbsolute =\n    path.isAbsolute ||\n    /* istanbul ignore next */ function(p) {\n        return path.resolve(p) === path.normalize(p);\n    };\n\n/**\n * abstract interface for writing content\n * @class ContentWriter\n * @constructor\n */\n/* istanbul ignore next: abstract class */\nfunction ContentWriter() {}\n\n/**\n * writes a string as-is to the destination\n * @param {String} str the string to write\n */\n/* istanbul ignore next: abstract class */\nContentWriter.prototype.write = function() {\n    throw new Error('write: must be overridden');\n};\n\n/**\n * returns the colorized version of a string. Typically,\n * content writers that write to files will return the\n * same string and ones writing to a tty will wrap it in\n * appropriate escape sequences.\n * @param {String} str the string to colorize\n * @param {String} clazz one of `high`, `medium` or `low`\n * @returns {String} the colorized form of the string\n */\nContentWriter.prototype.colorize = function(str /*, clazz*/) {\n    return str;\n};\n\n/**\n * writes a string appended with a newline to the destination\n * @param {String} str the string to write\n */\nContentWriter.prototype.println = function(str) {\n    this.write(str + '\\n');\n};\n\n/**\n * closes this content writer. Should be called after all writes are complete.\n */\nContentWriter.prototype.close = function() {};\n\n/**\n * a content writer that writes to a file\n * @param {Number} fd - the file descriptor\n * @extends ContentWriter\n * @constructor\n */\nfunction FileContentWriter(fd) {\n    this.fd = fd;\n}\nutil.inherits(FileContentWriter, ContentWriter);\n\nFileContentWriter.prototype.write = function(str) {\n    fs.writeSync(this.fd, str);\n};\n\nFileContentWriter.prototype.close = function() {\n    fs.closeSync(this.fd);\n};\n\n/**\n * a content writer that writes to the console\n * @extends ContentWriter\n * @constructor\n */\nfunction ConsoleWriter() {}\nutil.inherits(ConsoleWriter, ContentWriter);\n\n// allow stdout to be captured for tests.\nlet capture = false;\nlet output = '';\nConsoleWriter.prototype.write = function(str) {\n    if (capture) {\n        output += str;\n    } else {\n        process.stdout.write(str);\n    }\n};\n\nConsoleWriter.prototype.colorize = function(str, clazz) {\n    const colors = {\n        low: '31;1',\n        medium: '33;1',\n        high: '32;1'\n    };\n\n    /* istanbul ignore next: different modes for CI and local */\n    if (supportsColor.stdout && colors[clazz]) {\n        return '\\u001b[' + colors[clazz] + 'm' + str + '\\u001b[0m';\n    }\n    return str;\n};\n\n/**\n * utility for writing files under a specific directory\n * @class FileWriter\n * @param {String} baseDir the base directory under which files should be written\n * @constructor\n */\nfunction FileWriter(baseDir) {\n    if (!baseDir) {\n        throw new Error('baseDir must be specified');\n    }\n    this.baseDir = baseDir;\n}\n\n/**\n * static helpers for capturing stdout report output;\n * super useful for tests!\n */\nFileWriter.startCapture = function() {\n    capture = true;\n};\nFileWriter.stopCapture = function() {\n    capture = false;\n};\nFileWriter.getOutput = function() {\n    return output;\n};\nFileWriter.resetOutput = function() {\n    output = '';\n};\n\n/**\n * returns a FileWriter that is rooted at the supplied subdirectory\n * @param {String} subdir the subdirectory under which to root the\n *  returned FileWriter\n * @returns {FileWriter}\n */\nFileWriter.prototype.writerForDir = function(subdir) {\n    if (isAbsolute(subdir)) {\n        throw new Error(\n            'Cannot create subdir writer for absolute path: ' + subdir\n        );\n    }\n    return new FileWriter(this.baseDir + '/' + subdir);\n};\n/**\n * copies a file from a source directory to a destination name\n * @param {String} source path to source file\n * @param {String} dest relative path to destination file\n * @param {String} [header=undefined] optional text to prepend to destination\n *  (e.g., an \"this file is autogenerated\" comment, copyright notice, etc.)\n */\nFileWriter.prototype.copyFile = function(source, dest, header) {\n    if (isAbsolute(dest)) {\n        throw new Error('Cannot write to absolute path: ' + dest);\n    }\n    dest = path.resolve(this.baseDir, dest);\n    mkdirp.sync(path.dirname(dest));\n    let contents;\n    if (header) {\n        contents = header + fs.readFileSync(source, 'utf8');\n    } else {\n        contents = fs.readFileSync(source);\n    }\n    fs.writeFileSync(dest, contents);\n};\n/**\n * returns a content writer for writing content to the supplied file.\n * @param {String|null} file the relative path to the file or the special\n *  values `\"-\"` or `null` for writing to the console\n * @returns {ContentWriter}\n */\nFileWriter.prototype.writeFile = function(file) {\n    if (file === null || file === '-') {\n        return new ConsoleWriter();\n    }\n    if (isAbsolute(file)) {\n        throw new Error('Cannot write to absolute path: ' + file);\n    }\n    file = path.resolve(this.baseDir, file);\n    mkdirp.sync(path.dirname(file));\n    return new FileContentWriter(fs.openSync(file, 'w'));\n};\n\nmodule.exports = FileWriter;\n"]},"metadata":{},"sourceType":"script"}