{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nfunction percent(covered, total) {\n  let tmp;\n\n  if (total > 0) {\n    tmp = 1000 * 100 * covered / total + 5;\n    return Math.floor(tmp / 10) / 100;\n  } else {\n    return 100.0;\n  }\n}\n\nfunction blankSummary() {\n  const empty = function () {\n    return {\n      total: 0,\n      covered: 0,\n      skipped: 0,\n      pct: 'Unknown'\n    };\n  };\n\n  return {\n    lines: empty(),\n    statements: empty(),\n    functions: empty(),\n    branches: empty()\n  };\n} // asserts that a data object \"looks like\" a summary coverage object\n\n\nfunction assertValidSummary(obj) {\n  const valid = obj && obj.lines && obj.statements && obj.functions && obj.branches;\n\n  if (!valid) {\n    throw new Error('Invalid summary coverage object, missing keys, found:' + Object.keys(obj).join(','));\n  }\n}\n/**\n * CoverageSummary provides a summary of code coverage . It exposes 4 properties,\n * `lines`, `statements`, `branches`, and `functions`. Each of these properties\n * is an object that has 4 keys `total`, `covered`, `skipped` and `pct`.\n * `pct` is a percentage number (0-100).\n * @param {Object|CoverageSummary} [obj=undefined] an optional data object or\n * another coverage summary to initialize this object with.\n * @constructor\n */\n\n\nfunction CoverageSummary(obj) {\n  if (!obj) {\n    this.data = blankSummary();\n  } else if (obj instanceof CoverageSummary) {\n    this.data = obj.data;\n  } else {\n    this.data = obj;\n  }\n\n  assertValidSummary(this.data);\n}\n\n['lines', 'statements', 'functions', 'branches'].forEach(p => {\n  Object.defineProperty(CoverageSummary.prototype, p, {\n    enumerable: true,\n\n    get() {\n      return this.data[p];\n    }\n\n  });\n});\n/**\n * merges a second summary coverage object into this one\n * @param {CoverageSummary} obj - another coverage summary object\n */\n\nCoverageSummary.prototype.merge = function (obj) {\n  const keys = ['lines', 'statements', 'branches', 'functions'];\n  keys.forEach(key => {\n    this[key].total += obj[key].total;\n    this[key].covered += obj[key].covered;\n    this[key].skipped += obj[key].skipped;\n    this[key].pct = percent(this[key].covered, this[key].total);\n  });\n  return this;\n};\n/**\n * returns a POJO that is JSON serializable. May be used to get the raw\n * summary object.\n */\n\n\nCoverageSummary.prototype.toJSON = function () {\n  return this.data;\n};\n/**\n * return true if summary has no lines of code\n */\n\n\nCoverageSummary.prototype.isEmpty = function () {\n  return this.lines.total === 0;\n}; // returns a data object that represents empty coverage\n\n\nfunction emptyCoverage(filePath) {\n  return {\n    path: filePath,\n    statementMap: {},\n    fnMap: {},\n    branchMap: {},\n    s: {},\n    f: {},\n    b: {}\n  };\n} // asserts that a data object \"looks like\" a coverage object\n\n\nfunction assertValidObject(obj) {\n  const valid = obj && obj.path && obj.statementMap && obj.fnMap && obj.branchMap && obj.s && obj.f && obj.b;\n\n  if (!valid) {\n    throw new Error('Invalid file coverage object, missing keys, found:' + Object.keys(obj).join(','));\n  }\n}\n/**\n * provides a read-only view of coverage for a single file.\n * The deep structure of this object is documented elsewhere. It has the following\n * properties:\n *\n * * `path` - the file path for which coverage is being tracked\n * * `statementMap` - map of statement locations keyed by statement index\n * * `fnMap` - map of function metadata keyed by function index\n * * `branchMap` - map of branch metadata keyed by branch index\n * * `s` - hit counts for statements\n * * `f` - hit count for functions\n * * `b` - hit count for branches\n *\n * @param {Object|FileCoverage|String} pathOrObj is a string that initializes\n * and empty coverage object with the specified file path or a data object that\n * has all the required properties for a file coverage object.\n * @constructor\n */\n\n\nfunction FileCoverage(pathOrObj) {\n  if (!pathOrObj) {\n    throw new Error('Coverage must be initialized with a path or an object');\n  }\n\n  if (typeof pathOrObj === 'string') {\n    this.data = emptyCoverage(pathOrObj);\n  } else if (pathOrObj instanceof FileCoverage) {\n    this.data = pathOrObj.data;\n  } else if (typeof pathOrObj === 'object') {\n    this.data = pathOrObj;\n  } else {\n    throw new Error('Invalid argument to coverage constructor');\n  }\n\n  assertValidObject(this.data);\n}\n/**\n * returns computed line coverage from statement coverage.\n * This is a map of hits keyed by line number in the source.\n */\n\n\nFileCoverage.prototype.getLineCoverage = function () {\n  const statementMap = this.data.statementMap;\n  const statements = this.data.s;\n  const lineMap = Object.create(null);\n  Object.keys(statements).forEach(st => {\n    if (!statementMap[st]) {\n      return;\n    }\n\n    const line = statementMap[st].start.line;\n    const count = statements[st];\n    const prevVal = lineMap[line];\n\n    if (prevVal === undefined || prevVal < count) {\n      lineMap[line] = count;\n    }\n  });\n  return lineMap;\n};\n/**\n * returns an array of uncovered line numbers.\n * @returns {Array} an array of line numbers for which no hits have been\n *  collected.\n */\n\n\nFileCoverage.prototype.getUncoveredLines = function () {\n  const lc = this.getLineCoverage();\n  const ret = [];\n  Object.keys(lc).forEach(l => {\n    const hits = lc[l];\n\n    if (hits === 0) {\n      ret.push(l);\n    }\n  });\n  return ret;\n};\n/**\n * returns a map of branch coverage by source line number.\n * @returns {Object} an object keyed by line number. Each object\n * has a `covered`, `total` and `coverage` (percentage) property.\n */\n\n\nFileCoverage.prototype.getBranchCoverageByLine = function () {\n  const branchMap = this.branchMap;\n  const branches = this.b;\n  const ret = {};\n  Object.keys(branchMap).forEach(k => {\n    const line = branchMap[k].line || branchMap[k].loc.start.line;\n    const branchData = branches[k];\n    ret[line] = ret[line] || [];\n    ret[line].push(...branchData);\n  });\n  Object.keys(ret).forEach(k => {\n    const dataArray = ret[k];\n    const covered = dataArray.filter(item => item > 0);\n    const coverage = covered.length / dataArray.length * 100;\n    ret[k] = {\n      covered: covered.length,\n      total: dataArray.length,\n      coverage\n    };\n  });\n  return ret;\n}; // expose coverage data attributes\n\n\n['path', 'statementMap', 'fnMap', 'branchMap', 's', 'f', 'b'].forEach(p => {\n  Object.defineProperty(FileCoverage.prototype, p, {\n    enumerable: true,\n\n    get() {\n      return this.data[p];\n    }\n\n  });\n});\n/**\n * return a JSON-serializable POJO for this file coverage object\n */\n\nFileCoverage.prototype.toJSON = function () {\n  return this.data;\n};\n/**\n * merges a second coverage object into this one, updating hit counts\n * @param {FileCoverage} other - the coverage object to be merged into this one.\n *  Note that the other object should have the same structure as this one (same file).\n */\n\n\nFileCoverage.prototype.merge = function (other) {\n  Object.keys(other.s).forEach(k => {\n    this.data.s[k] += other.s[k];\n  });\n  Object.keys(other.f).forEach(k => {\n    this.data.f[k] += other.f[k];\n  });\n  Object.keys(other.b).forEach(k => {\n    let i;\n    const retArray = this.data.b[k];\n    const secondArray = other.b[k];\n\n    if (!retArray) {\n      this.data.b[k] = secondArray;\n      return;\n    }\n\n    for (i = 0; i < retArray.length; i += 1) {\n      retArray[i] += secondArray[i];\n    }\n  });\n};\n\nFileCoverage.prototype.computeSimpleTotals = function (property) {\n  let stats = this[property];\n  const ret = {\n    total: 0,\n    covered: 0,\n    skipped: 0\n  };\n\n  if (typeof stats === 'function') {\n    stats = stats.call(this);\n  }\n\n  Object.keys(stats).forEach(key => {\n    const covered = !!stats[key];\n    ret.total += 1;\n\n    if (covered) {\n      ret.covered += 1;\n    }\n  });\n  ret.pct = percent(ret.covered, ret.total);\n  return ret;\n};\n\nFileCoverage.prototype.computeBranchTotals = function () {\n  const stats = this.b;\n  const ret = {\n    total: 0,\n    covered: 0,\n    skipped: 0\n  };\n  Object.keys(stats).forEach(key => {\n    const branches = stats[key];\n    let covered;\n    branches.forEach(branchHits => {\n      covered = branchHits > 0;\n\n      if (covered) {\n        ret.covered += 1;\n      }\n    });\n    ret.total += branches.length;\n  });\n  ret.pct = percent(ret.covered, ret.total);\n  return ret;\n};\n/**\n * resets hit counts for all statements, functions and branches\n * in this coverage object resulting in zero coverage.\n */\n\n\nFileCoverage.prototype.resetHits = function () {\n  const statements = this.s;\n  const functions = this.f;\n  const branches = this.b;\n  Object.keys(statements).forEach(s => {\n    statements[s] = 0;\n  });\n  Object.keys(functions).forEach(f => {\n    functions[f] = 0;\n  });\n  Object.keys(branches).forEach(b => {\n    const hits = branches[b];\n    branches[b] = hits.map(() => 0);\n  });\n};\n/**\n * returns a CoverageSummary for this file coverage object\n * @returns {CoverageSummary}\n */\n\n\nFileCoverage.prototype.toSummary = function () {\n  const ret = {};\n  ret.lines = this.computeSimpleTotals('getLineCoverage');\n  ret.functions = this.computeSimpleTotals('f', 'fnMap');\n  ret.statements = this.computeSimpleTotals('s', 'statementMap');\n  ret.branches = this.computeBranchTotals();\n  return new CoverageSummary(ret);\n};\n\nmodule.exports = {\n  CoverageSummary,\n  FileCoverage\n};","map":{"version":3,"sources":["/Users/yanzhao/react-employer-viewer/node_modules/istanbul-lib-coverage/lib/file.js"],"names":["percent","covered","total","tmp","Math","floor","blankSummary","empty","skipped","pct","lines","statements","functions","branches","assertValidSummary","obj","valid","Error","Object","keys","join","CoverageSummary","data","forEach","p","defineProperty","prototype","enumerable","get","merge","key","toJSON","isEmpty","emptyCoverage","filePath","path","statementMap","fnMap","branchMap","s","f","b","assertValidObject","FileCoverage","pathOrObj","getLineCoverage","lineMap","create","st","line","start","count","prevVal","undefined","getUncoveredLines","lc","ret","l","hits","push","getBranchCoverageByLine","k","loc","branchData","dataArray","filter","item","coverage","length","other","i","retArray","secondArray","computeSimpleTotals","property","stats","call","computeBranchTotals","branchHits","resetHits","map","toSummary","module","exports"],"mappings":"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","sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nfunction percent(covered, total) {\n    let tmp;\n    if (total > 0) {\n        tmp = (1000 * 100 * covered) / total + 5;\n        return Math.floor(tmp / 10) / 100;\n    } else {\n        return 100.0;\n    }\n}\n\nfunction blankSummary() {\n    const empty = function() {\n        return {\n            total: 0,\n            covered: 0,\n            skipped: 0,\n            pct: 'Unknown'\n        };\n    };\n    return {\n        lines: empty(),\n        statements: empty(),\n        functions: empty(),\n        branches: empty()\n    };\n}\n\n// asserts that a data object \"looks like\" a summary coverage object\nfunction assertValidSummary(obj) {\n    const valid =\n        obj && obj.lines && obj.statements && obj.functions && obj.branches;\n    if (!valid) {\n        throw new Error(\n            'Invalid summary coverage object, missing keys, found:' +\n                Object.keys(obj).join(',')\n        );\n    }\n}\n/**\n * CoverageSummary provides a summary of code coverage . It exposes 4 properties,\n * `lines`, `statements`, `branches`, and `functions`. Each of these properties\n * is an object that has 4 keys `total`, `covered`, `skipped` and `pct`.\n * `pct` is a percentage number (0-100).\n * @param {Object|CoverageSummary} [obj=undefined] an optional data object or\n * another coverage summary to initialize this object with.\n * @constructor\n */\nfunction CoverageSummary(obj) {\n    if (!obj) {\n        this.data = blankSummary();\n    } else if (obj instanceof CoverageSummary) {\n        this.data = obj.data;\n    } else {\n        this.data = obj;\n    }\n    assertValidSummary(this.data);\n}\n\n['lines', 'statements', 'functions', 'branches'].forEach(p => {\n    Object.defineProperty(CoverageSummary.prototype, p, {\n        enumerable: true,\n        get() {\n            return this.data[p];\n        }\n    });\n});\n\n/**\n * merges a second summary coverage object into this one\n * @param {CoverageSummary} obj - another coverage summary object\n */\nCoverageSummary.prototype.merge = function(obj) {\n    const keys = ['lines', 'statements', 'branches', 'functions'];\n    keys.forEach(key => {\n        this[key].total += obj[key].total;\n        this[key].covered += obj[key].covered;\n        this[key].skipped += obj[key].skipped;\n        this[key].pct = percent(this[key].covered, this[key].total);\n    });\n    return this;\n};\n\n/**\n * returns a POJO that is JSON serializable. May be used to get the raw\n * summary object.\n */\nCoverageSummary.prototype.toJSON = function() {\n    return this.data;\n};\n\n/**\n * return true if summary has no lines of code\n */\nCoverageSummary.prototype.isEmpty = function() {\n    return this.lines.total === 0;\n};\n\n// returns a data object that represents empty coverage\nfunction emptyCoverage(filePath) {\n    return {\n        path: filePath,\n        statementMap: {},\n        fnMap: {},\n        branchMap: {},\n        s: {},\n        f: {},\n        b: {}\n    };\n}\n// asserts that a data object \"looks like\" a coverage object\nfunction assertValidObject(obj) {\n    const valid =\n        obj &&\n        obj.path &&\n        obj.statementMap &&\n        obj.fnMap &&\n        obj.branchMap &&\n        obj.s &&\n        obj.f &&\n        obj.b;\n    if (!valid) {\n        throw new Error(\n            'Invalid file coverage object, missing keys, found:' +\n                Object.keys(obj).join(',')\n        );\n    }\n}\n/**\n * provides a read-only view of coverage for a single file.\n * The deep structure of this object is documented elsewhere. It has the following\n * properties:\n *\n * * `path` - the file path for which coverage is being tracked\n * * `statementMap` - map of statement locations keyed by statement index\n * * `fnMap` - map of function metadata keyed by function index\n * * `branchMap` - map of branch metadata keyed by branch index\n * * `s` - hit counts for statements\n * * `f` - hit count for functions\n * * `b` - hit count for branches\n *\n * @param {Object|FileCoverage|String} pathOrObj is a string that initializes\n * and empty coverage object with the specified file path or a data object that\n * has all the required properties for a file coverage object.\n * @constructor\n */\nfunction FileCoverage(pathOrObj) {\n    if (!pathOrObj) {\n        throw new Error(\n            'Coverage must be initialized with a path or an object'\n        );\n    }\n    if (typeof pathOrObj === 'string') {\n        this.data = emptyCoverage(pathOrObj);\n    } else if (pathOrObj instanceof FileCoverage) {\n        this.data = pathOrObj.data;\n    } else if (typeof pathOrObj === 'object') {\n        this.data = pathOrObj;\n    } else {\n        throw new Error('Invalid argument to coverage constructor');\n    }\n    assertValidObject(this.data);\n}\n/**\n * returns computed line coverage from statement coverage.\n * This is a map of hits keyed by line number in the source.\n */\nFileCoverage.prototype.getLineCoverage = function() {\n    const statementMap = this.data.statementMap;\n    const statements = this.data.s;\n    const lineMap = Object.create(null);\n\n    Object.keys(statements).forEach(st => {\n        if (!statementMap[st]) {\n            return;\n        }\n        const line = statementMap[st].start.line;\n        const count = statements[st];\n        const prevVal = lineMap[line];\n        if (prevVal === undefined || prevVal < count) {\n            lineMap[line] = count;\n        }\n    });\n    return lineMap;\n};\n/**\n * returns an array of uncovered line numbers.\n * @returns {Array} an array of line numbers for which no hits have been\n *  collected.\n */\nFileCoverage.prototype.getUncoveredLines = function() {\n    const lc = this.getLineCoverage();\n    const ret = [];\n    Object.keys(lc).forEach(l => {\n        const hits = lc[l];\n        if (hits === 0) {\n            ret.push(l);\n        }\n    });\n    return ret;\n};\n/**\n * returns a map of branch coverage by source line number.\n * @returns {Object} an object keyed by line number. Each object\n * has a `covered`, `total` and `coverage` (percentage) property.\n */\nFileCoverage.prototype.getBranchCoverageByLine = function() {\n    const branchMap = this.branchMap;\n    const branches = this.b;\n    const ret = {};\n    Object.keys(branchMap).forEach(k => {\n        const line = branchMap[k].line || branchMap[k].loc.start.line;\n        const branchData = branches[k];\n        ret[line] = ret[line] || [];\n        ret[line].push(...branchData);\n    });\n    Object.keys(ret).forEach(k => {\n        const dataArray = ret[k];\n        const covered = dataArray.filter(item => item > 0);\n        const coverage = (covered.length / dataArray.length) * 100;\n        ret[k] = {\n            covered: covered.length,\n            total: dataArray.length,\n            coverage\n        };\n    });\n    return ret;\n};\n\n// expose coverage data attributes\n['path', 'statementMap', 'fnMap', 'branchMap', 's', 'f', 'b'].forEach(p => {\n    Object.defineProperty(FileCoverage.prototype, p, {\n        enumerable: true,\n        get() {\n            return this.data[p];\n        }\n    });\n});\n/**\n * return a JSON-serializable POJO for this file coverage object\n */\nFileCoverage.prototype.toJSON = function() {\n    return this.data;\n};\n/**\n * merges a second coverage object into this one, updating hit counts\n * @param {FileCoverage} other - the coverage object to be merged into this one.\n *  Note that the other object should have the same structure as this one (same file).\n */\nFileCoverage.prototype.merge = function(other) {\n    Object.keys(other.s).forEach(k => {\n        this.data.s[k] += other.s[k];\n    });\n    Object.keys(other.f).forEach(k => {\n        this.data.f[k] += other.f[k];\n    });\n    Object.keys(other.b).forEach(k => {\n        let i;\n        const retArray = this.data.b[k];\n        const secondArray = other.b[k];\n        if (!retArray) {\n            this.data.b[k] = secondArray;\n            return;\n        }\n        for (i = 0; i < retArray.length; i += 1) {\n            retArray[i] += secondArray[i];\n        }\n    });\n};\n\nFileCoverage.prototype.computeSimpleTotals = function(property) {\n    let stats = this[property];\n    const ret = { total: 0, covered: 0, skipped: 0 };\n\n    if (typeof stats === 'function') {\n        stats = stats.call(this);\n    }\n    Object.keys(stats).forEach(key => {\n        const covered = !!stats[key];\n        ret.total += 1;\n        if (covered) {\n            ret.covered += 1;\n        }\n    });\n    ret.pct = percent(ret.covered, ret.total);\n    return ret;\n};\n\nFileCoverage.prototype.computeBranchTotals = function() {\n    const stats = this.b;\n    const ret = { total: 0, covered: 0, skipped: 0 };\n\n    Object.keys(stats).forEach(key => {\n        const branches = stats[key];\n        let covered;\n        branches.forEach(branchHits => {\n            covered = branchHits > 0;\n            if (covered) {\n                ret.covered += 1;\n            }\n        });\n        ret.total += branches.length;\n    });\n    ret.pct = percent(ret.covered, ret.total);\n    return ret;\n};\n/**\n * resets hit counts for all statements, functions and branches\n * in this coverage object resulting in zero coverage.\n */\nFileCoverage.prototype.resetHits = function() {\n    const statements = this.s;\n    const functions = this.f;\n    const branches = this.b;\n    Object.keys(statements).forEach(s => {\n        statements[s] = 0;\n    });\n    Object.keys(functions).forEach(f => {\n        functions[f] = 0;\n    });\n    Object.keys(branches).forEach(b => {\n        const hits = branches[b];\n        branches[b] = hits.map(() => 0);\n    });\n};\n\n/**\n * returns a CoverageSummary for this file coverage object\n * @returns {CoverageSummary}\n */\nFileCoverage.prototype.toSummary = function() {\n    const ret = {};\n    ret.lines = this.computeSimpleTotals('getLineCoverage');\n    ret.functions = this.computeSimpleTotals('f', 'fnMap');\n    ret.statements = this.computeSimpleTotals('s', 'statementMap');\n    ret.branches = this.computeBranchTotals();\n    return new CoverageSummary(ret);\n};\n\nmodule.exports = {\n    CoverageSummary,\n    FileCoverage\n};\n"]},"metadata":{},"sourceType":"script"}