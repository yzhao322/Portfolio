{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst INDENT = '  ';\n/**\n * a utility class to produce well-formed, indented XML\n * @param {ContentWriter} contentWriter the content writer that this utility wraps\n * @constructor\n */\n\nfunction XMLWriter(contentWriter) {\n  this.cw = contentWriter;\n  this.stack = [];\n}\n\nfunction attrString(attrs) {\n  if (!attrs) {\n    return '';\n  }\n\n  const ret = [];\n  Object.keys(attrs).forEach(k => {\n    const v = attrs[k];\n    ret.push(k + '=\"' + v + '\"');\n  });\n  return ret.length === 0 ? '' : ' ' + ret.join(' ');\n}\n\nXMLWriter.prototype.indent = function (str) {\n  return this.stack.map(() => INDENT).join('') + str;\n};\n/**\n * writes the opening XML tag with the supplied attributes\n * @param {String} name tag name\n * @param {Object} [attrs=null] attrs attributes for the tag\n */\n\n\nXMLWriter.prototype.openTag = function (name, attrs) {\n  const str = this.indent('<' + name + attrString(attrs) + '>');\n  this.cw.println(str);\n  this.stack.push(name);\n};\n/**\n * closes an open XML tag.\n * @param {String} name - tag name to close. This must match the writer's\n *  notion of the tag that is currently open.\n */\n\n\nXMLWriter.prototype.closeTag = function (name) {\n  if (this.stack.length === 0) {\n    throw new Error('Attempt to close tag ' + name + ' when not opened');\n  }\n\n  const stashed = this.stack.pop();\n  const str = '</' + name + '>';\n\n  if (stashed !== name) {\n    throw new Error('Attempt to close tag ' + name + ' when ' + stashed + ' was the one open');\n  }\n\n  this.cw.println(this.indent(str));\n};\n/**\n * writes a tag and its value opening and closing it at the same time\n * @param {String} name tag name\n * @param {Object} [attrs=null] attrs tag attributes\n * @param {String} [content=null] content optional tag content\n */\n\n\nXMLWriter.prototype.inlineTag = function (name, attrs, content) {\n  let str = '<' + name + attrString(attrs);\n\n  if (content) {\n    str += '>' + content + '</' + name + '>';\n  } else {\n    str += '/>';\n  }\n\n  str = this.indent(str);\n  this.cw.println(str);\n};\n/**\n * closes all open tags and ends the document\n */\n\n\nXMLWriter.prototype.closeAll = function () {\n  this.stack.slice().reverse().forEach(name => {\n    this.closeTag(name);\n  });\n};\n\nmodule.exports = XMLWriter;","map":{"version":3,"sources":["/Users/yanzhao/react-employer-viewer/node_modules/istanbul-lib-report/lib/xml-writer.js"],"names":["INDENT","XMLWriter","contentWriter","cw","stack","attrString","attrs","ret","Object","keys","forEach","k","v","push","length","join","prototype","indent","str","map","openTag","name","println","closeTag","Error","stashed","pop","inlineTag","content","closeAll","slice","reverse","module","exports"],"mappings":"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","sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst INDENT = '  ';\n\n/**\n * a utility class to produce well-formed, indented XML\n * @param {ContentWriter} contentWriter the content writer that this utility wraps\n * @constructor\n */\nfunction XMLWriter(contentWriter) {\n    this.cw = contentWriter;\n    this.stack = [];\n}\n\nfunction attrString(attrs) {\n    if (!attrs) {\n        return '';\n    }\n    const ret = [];\n    Object.keys(attrs).forEach(k => {\n        const v = attrs[k];\n        ret.push(k + '=\"' + v + '\"');\n    });\n    return ret.length === 0 ? '' : ' ' + ret.join(' ');\n}\n\nXMLWriter.prototype.indent = function(str) {\n    return this.stack.map(() => INDENT).join('') + str;\n};\n\n/**\n * writes the opening XML tag with the supplied attributes\n * @param {String} name tag name\n * @param {Object} [attrs=null] attrs attributes for the tag\n */\nXMLWriter.prototype.openTag = function(name, attrs) {\n    const str = this.indent('<' + name + attrString(attrs) + '>');\n    this.cw.println(str);\n    this.stack.push(name);\n};\n\n/**\n * closes an open XML tag.\n * @param {String} name - tag name to close. This must match the writer's\n *  notion of the tag that is currently open.\n */\nXMLWriter.prototype.closeTag = function(name) {\n    if (this.stack.length === 0) {\n        throw new Error('Attempt to close tag ' + name + ' when not opened');\n    }\n    const stashed = this.stack.pop();\n    const str = '</' + name + '>';\n\n    if (stashed !== name) {\n        throw new Error(\n            'Attempt to close tag ' +\n                name +\n                ' when ' +\n                stashed +\n                ' was the one open'\n        );\n    }\n    this.cw.println(this.indent(str));\n};\n/**\n * writes a tag and its value opening and closing it at the same time\n * @param {String} name tag name\n * @param {Object} [attrs=null] attrs tag attributes\n * @param {String} [content=null] content optional tag content\n */\nXMLWriter.prototype.inlineTag = function(name, attrs, content) {\n    let str = '<' + name + attrString(attrs);\n    if (content) {\n        str += '>' + content + '</' + name + '>';\n    } else {\n        str += '/>';\n    }\n    str = this.indent(str);\n    this.cw.println(str);\n};\n/**\n * closes all open tags and ends the document\n */\nXMLWriter.prototype.closeAll = function() {\n    this.stack\n        .slice()\n        .reverse()\n        .forEach(name => {\n            this.closeTag(name);\n        });\n};\n\nmodule.exports = XMLWriter;\n"]},"metadata":{},"sourceType":"script"}